environments:
  example:
    environment_variables:
      EXAMPLE_DEPLOYMENT: testing
#    pipelines:
#      - yaml-example
pipelines:
#  yamlpipe1:
#    group: simple
#    materials:
#      mygit:  # this is the name of material
#        # says about type of material and url at once
#        git: http://my.example.org/mygit.git
#    stages:
#      - build: # name of stage
#          jobs:
#            build: # name of the job
#              tasks:
#               - exec: # indicates type of task
#                   command: make

#  run_pr_tests:
#    group: Rest_API_Service
#    materials:
#      mygit:  # this is the name of material
#        # says about type of material and url at once
#        git: https://github.com/klub/restservice.git
#        branch: dockerise-app
#    stages:
#      - build: # build the app
#          jobs:
#            build: # name of the job
#              tasks:
#               - exec: # Give the app a few seconds to finish initialisig
#                   command: pwd
#
#               - exec: # Give the app a few seconds to finish initialisig
#                   command: ls
#                   arguments:
#                   - -lah
#
#               - exec: # Spin up containers used by application under test
#                   command: /bin/bash
#                   arguments:
#                   - ./bootstrap-for-ci.sh
#
#               - exec: # run command that executes the tests
#                   command: sudo
#                   arguments:
#                   - docker-compose
#                   - -f
#                   - docker-compose.test.yml
#                   - ps
#
#               - exec: # run command that executes the tests
#                   command: sudo
#                   arguments:
#                   - docker
#                   - exec
#                   - runprtests_web_1
#                   - make
#                   - tests-pull-request
#
#               - exec: # Spin down containers used by application under test
#                   run_if: any
#                   command: sudo
#                   arguments:
#                   - docker-compose
#                   - -f
#                   - docker-compose.test.yml
#                   - down

  run_pr_tests:
    group: Rest_API_Service
    materials:
#      mygit:  # this is the name of material
#        # says about type of material and url at once
#        git: https://github.com/klub/restservice.git
#        branch: dockerise-app
#        destination:

      myPluggableGit:
        scm: 3ddf23b6-31a6-4567-86cc-3882ad66565a
        destination: restservice
#        blacklist:
#          - dir1
#          - dir2


    stages:
      - build: # build the app
          jobs:
            build: # name of the job
              tasks:
               - exec: # Give the app a few seconds to finish initialisig
                   command: pwd

               - exec: # Give the app a few seconds to finish initialisig
                   command: ls
                   arguments:
                   - -lah

               - exec: # Spin up containers used by application under test
                   working_directory: restservice
                   command: /bin/bash
                   arguments:
                   - ./bootstrap-for-ci.sh

               - exec: # run command that executes the tests
                   working_directory: restservice
                   command: sudo
                   arguments:
                   - docker-compose
                   - -f
                   - docker-compose.test.yml
                   - ps

               - exec: # run command that executes the tests
                   working_directory: restservice
                   command: sudo
                   arguments:
                   - docker
                   - exec
                   - runprtests_web_1
                   - make
                   - tests-pull-request

               - exec: # Spin down containers used by application under test
                   working_directory: restservice
                   run_if: any
                   command: sudo
                   arguments:
                   - docker-compose
                   - -f
                   - docker-compose.test.yml
                   - down


  basic-ci-counter-app:
    group: simple
    materials:
      mygit:  # this is the name of material
        # says about type of material and url at once
        git: https://github.com/klub/digital-ocean-docker-ci-poc.git
        branch: develop
    stages:
      - build: # build the app
          jobs:
            build: # name of the job
              tasks:
               - exec: # Spin up containers used by application under test
                   command: sudo
                   arguments:
                   - docker-compose
                   - -f
                   - hello_world/docker-compose.test.yml
                   - up
                   - -d
                   - --build

               - exec: # Give the app a few seconds to finish initialisig
                   command: sleep
                   arguments:
                   - 4

               - exec: # run command that executes the tests
                   command: sudo
                   arguments:
                   - docker
                   - exec
                   - helloworld_web_1
                   - ./run_test.sh

               - exec: # Spin down containers used by application under test
                   run_if: any
                   command: sudo
                   arguments:
                   - docker-compose
                   - -f
                   - hello_world/docker-compose.test.yml
                   - down
    timer:
      spec: "1 * * * * ?" #1 second past every minute
      only_on_changes: yes

#  "yaml-example": # definition of yaml-example pipeline
#    group: yaml-example
#    label_template: "${mygit[:8]}"
#    locking: off
#    materials:
#      mygit: # this is the name of material
#        # keyword git says about type of material and url at once
#        git: http://my.example.org/mygit.git
#        branch: ci
#      upstream:
#        # type is optional here, material type is implied based on presence of pipeline and stage fields
#        # type: dependency
#        pipeline: yamlpipe1
#        stage: build
#    stages: # list of stages in order
#      - build: # name of stage
#          clean_workspace: true
#          jobs:
#            csharp: # name of the job
#              resources:
#               - net45
#              artifacts:
#               - build:
#                   source: bin/
#                   destination: build
#               - test:
#                   source: tests/
#                   destination: test-reports/
#              tabs:
#                report: test-reports/index.html
#              tasks: # ordered list of tasks to execute in job csharp
#               - fetch:
#                   pipeline: yamlpipe1
#                   stage: build
#                   job: build
#                   source: test-bin/
#                   destination: bin/
#               - exec: # indicates type of task
#                   command: make
#                   arguments:
#                    - "VERBOSE=true"
